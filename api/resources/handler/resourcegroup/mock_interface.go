// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -destination=mock_interface.go -package=handler -source=interface.go
//

// Package handler is a generated GoMock package.
package resourcegroup

import (
	reflect "reflect"

	models "github.com/zopdev/zopdev/api/resources/models"
	gomock "go.uber.org/mock/gomock"
	gofr "gofr.dev/pkg/gofr"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CreateResourceGroup mocks base method.
func (m *MockService) CreateResourceGroup(ctx *gofr.Context, rg *models.RGCreate) (*models.ResourceGroupData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateResourceGroup", ctx, rg)
	ret0, _ := ret[0].(*models.ResourceGroupData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateResourceGroup indicates an expected call of CreateResourceGroup.
func (mr *MockServiceMockRecorder) CreateResourceGroup(ctx, rg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateResourceGroup", reflect.TypeOf((*MockService)(nil).CreateResourceGroup), ctx, rg)
}

// DeleteResourceGroup mocks base method.
func (m *MockService) DeleteResourceGroup(ctx *gofr.Context, cloudAccID, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResourceGroup", ctx, cloudAccID, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteResourceGroup indicates an expected call of DeleteResourceGroup.
func (mr *MockServiceMockRecorder) DeleteResourceGroup(ctx, cloudAccID, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResourceGroup", reflect.TypeOf((*MockService)(nil).DeleteResourceGroup), ctx, cloudAccID, id)
}

// GetAllResourceGroups mocks base method.
func (m *MockService) GetAllResourceGroups(ctx *gofr.Context, cloudAccID int64) ([]models.ResourceGroupData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllResourceGroups", ctx, cloudAccID)
	ret0, _ := ret[0].([]models.ResourceGroupData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllResourceGroups indicates an expected call of GetAllResourceGroups.
func (mr *MockServiceMockRecorder) GetAllResourceGroups(ctx, cloudAccID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllResourceGroups", reflect.TypeOf((*MockService)(nil).GetAllResourceGroups), ctx, cloudAccID)
}

// GetResourceGroupByID mocks base method.
func (m *MockService) GetResourceGroupByID(ctx *gofr.Context, cloudAccID, id int64) (*models.ResourceGroupData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceGroupByID", ctx, cloudAccID, id)
	ret0, _ := ret[0].(*models.ResourceGroupData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourceGroupByID indicates an expected call of GetResourceGroupByID.
func (mr *MockServiceMockRecorder) GetResourceGroupByID(ctx, cloudAccID, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceGroupByID", reflect.TypeOf((*MockService)(nil).GetResourceGroupByID), ctx, cloudAccID, id)
}

// UpdateResourceGroup mocks base method.
func (m *MockService) UpdateResourceGroup(ctx *gofr.Context, rg *models.RGUpdate) (*models.ResourceGroupData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateResourceGroup", ctx, rg)
	ret0, _ := ret[0].(*models.ResourceGroupData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateResourceGroup indicates an expected call of UpdateResourceGroup.
func (mr *MockServiceMockRecorder) UpdateResourceGroup(ctx, rg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResourceGroup", reflect.TypeOf((*MockService)(nil).UpdateResourceGroup), ctx, rg)
}
