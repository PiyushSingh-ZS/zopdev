// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -destination=mock_interface.go -package=handler -source=interface.go
//

// Package handler is a generated GoMock package.
package resource

import (
	service "github.com/zopdev/zopdev/api/resources/service/resource"
	reflect "reflect"

	models "github.com/zopdev/zopdev/api/resources/models"
	gomock "go.uber.org/mock/gomock"
	gofr "gofr.dev/pkg/gofr"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// ChangeState mocks base method.
func (m *MockService) ChangeState(ctx *gofr.Context, resDetails service.ResourceDetails) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeState", ctx, resDetails)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeState indicates an expected call of ChangeState.
func (mr *MockServiceMockRecorder) ChangeState(ctx, resDetails any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeState", reflect.TypeOf((*MockService)(nil).ChangeState), ctx, resDetails)
}

// GetAll mocks base method.
func (m *MockService) GetAll(ctx *gofr.Context, id int64, resourceType []string) ([]models.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, id, resourceType)
	ret0, _ := ret[0].([]models.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockServiceMockRecorder) GetAll(ctx, id, resourceType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockService)(nil).GetAll), ctx, id, resourceType)
}

// SyncResources mocks base method.
func (m *MockService) SyncResources(ctx *gofr.Context, id int64) ([]models.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncResources", ctx, id)
	ret0, _ := ret[0].([]models.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncResources indicates an expected call of SyncResources.
func (mr *MockServiceMockRecorder) SyncResources(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncResources", reflect.TypeOf((*MockService)(nil).SyncResources), ctx, id)
}
