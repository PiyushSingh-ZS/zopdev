// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -destination=mock_interface.go -package=handler -source=interface.go
//

// Package handler is a generated GoMock package.
package handler

import (
	reflect "reflect"

	models "github.com/zopdev/zopdev/api/resources/providers/models"
	service "github.com/zopdev/zopdev/api/resources/service"
	gomock "go.uber.org/mock/gomock"
	gofr "gofr.dev/pkg/gofr"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// GetAllSQLInstances mocks base method.
func (m *MockService) GetAllSQLInstances(ctx *gofr.Context, req service.Request) ([]models.SQLInstance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSQLInstances", ctx, req)
	ret0, _ := ret[0].([]models.SQLInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSQLInstances indicates an expected call of GetAllSQLInstances.
func (mr *MockServiceMockRecorder) GetAllSQLInstances(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSQLInstances", reflect.TypeOf((*MockService)(nil).GetAllSQLInstances), ctx, req)
}
