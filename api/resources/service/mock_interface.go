// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -destination=mock_interface.go -package=service -source=interface.go
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	client "github.com/zopdev/zopdev/api/resources/client"
	models "github.com/zopdev/zopdev/api/resources/models"
	gcp "github.com/zopdev/zopdev/api/resources/providers/gcp"
	gomock "go.uber.org/mock/gomock"
	gofr "gofr.dev/pkg/gofr"
	google "golang.org/x/oauth2/google"
	option "google.golang.org/api/option"
)

// MockGCPClient is a mock of GCPClient interface.
type MockGCPClient struct {
	ctrl     *gomock.Controller
	recorder *MockGCPClientMockRecorder
	isgomock struct{}
}

// MockGCPClientMockRecorder is the mock recorder for MockGCPClient.
type MockGCPClientMockRecorder struct {
	mock *MockGCPClient
}

// NewMockGCPClient creates a new mock instance.
func NewMockGCPClient(ctrl *gomock.Controller) *MockGCPClient {
	mock := &MockGCPClient{ctrl: ctrl}
	mock.recorder = &MockGCPClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGCPClient) EXPECT() *MockGCPClientMockRecorder {
	return m.recorder
}

// NewGoogleCredentials mocks base method.
func (m *MockGCPClient) NewGoogleCredentials(ctx context.Context, cred any, scopes ...string) (*google.Credentials, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, cred}
	for _, a := range scopes {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewGoogleCredentials", varargs...)
	ret0, _ := ret[0].(*google.Credentials)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewGoogleCredentials indicates an expected call of NewGoogleCredentials.
func (mr *MockGCPClientMockRecorder) NewGoogleCredentials(ctx, cred any, scopes ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, cred}, scopes...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewGoogleCredentials", reflect.TypeOf((*MockGCPClient)(nil).NewGoogleCredentials), varargs...)
}

// NewSQLClient mocks base method.
func (m *MockGCPClient) NewSQLClient(ctx context.Context, opts ...option.ClientOption) (gcp.SQLClient, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewSQLClient", varargs...)
	ret0, _ := ret[0].(gcp.SQLClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewSQLClient indicates an expected call of NewSQLClient.
func (mr *MockGCPClientMockRecorder) NewSQLClient(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewSQLClient", reflect.TypeOf((*MockGCPClient)(nil).NewSQLClient), varargs...)
}

// MockHTTPClient is a mock of HTTPClient interface.
type MockHTTPClient struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPClientMockRecorder
	isgomock struct{}
}

// MockHTTPClientMockRecorder is the mock recorder for MockHTTPClient.
type MockHTTPClientMockRecorder struct {
	mock *MockHTTPClient
}

// NewMockHTTPClient creates a new mock instance.
func NewMockHTTPClient(ctrl *gomock.Controller) *MockHTTPClient {
	mock := &MockHTTPClient{ctrl: ctrl}
	mock.recorder = &MockHTTPClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHTTPClient) EXPECT() *MockHTTPClientMockRecorder {
	return m.recorder
}

// GetCloudCredentials mocks base method.
func (m *MockHTTPClient) GetCloudCredentials(ctx *gofr.Context, cloudAccID int64) (*client.CloudAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCloudCredentials", ctx, cloudAccID)
	ret0, _ := ret[0].(*client.CloudAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCloudCredentials indicates an expected call of GetCloudCredentials.
func (mr *MockHTTPClientMockRecorder) GetCloudCredentials(ctx, cloudAccID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCloudCredentials", reflect.TypeOf((*MockHTTPClient)(nil).GetCloudCredentials), ctx, cloudAccID)
}

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
	isgomock struct{}
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// GetResources mocks base method.
func (m *MockStore) GetResources(ctx *gofr.Context, cloudAccountID int64, resourceType []string) ([]models.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResources", ctx, cloudAccountID, resourceType)
	ret0, _ := ret[0].([]models.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResources indicates an expected call of GetResources.
func (mr *MockStoreMockRecorder) GetResources(ctx, cloudAccountID, resourceType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResources", reflect.TypeOf((*MockStore)(nil).GetResources), ctx, cloudAccountID, resourceType)
}

// InsertResource mocks base method.
func (m *MockStore) InsertResource(ctx *gofr.Context, resources *models.Instance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertResource", ctx, resources)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertResource indicates an expected call of InsertResource.
func (mr *MockStoreMockRecorder) InsertResource(ctx, resources any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertResource", reflect.TypeOf((*MockStore)(nil).InsertResource), ctx, resources)
}

// RemoveResource mocks base method.
func (m *MockStore) RemoveResource(ctx *gofr.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveResource", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveResource indicates an expected call of RemoveResource.
func (mr *MockStoreMockRecorder) RemoveResource(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveResource", reflect.TypeOf((*MockStore)(nil).RemoveResource), ctx, id)
}

// UpdateResource mocks base method.
func (m *MockStore) UpdateResource(ctx *gofr.Context, res *models.Instance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateResource", ctx, res)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateResource indicates an expected call of UpdateResource.
func (mr *MockStoreMockRecorder) UpdateResource(ctx, res any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResource", reflect.TypeOf((*MockStore)(nil).UpdateResource), ctx, res)
}
