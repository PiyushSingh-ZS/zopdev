// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -destination=mock_interface.go -package=resourcegroup -source=interface.go
//

// Package resourcegroup is a generated GoMock package.
package resourcegroup

import (
	reflect "reflect"

	models "github.com/zopdev/zopdev/api/resources/models"
	gomock "go.uber.org/mock/gomock"
	gofr "gofr.dev/pkg/gofr"
)

// MockRGStore is a mock of RGStore interface.
type MockRGStore struct {
	ctrl     *gomock.Controller
	recorder *MockRGStoreMockRecorder
	isgomock struct{}
}

// MockRGStoreMockRecorder is the mock recorder for MockRGStore.
type MockRGStoreMockRecorder struct {
	mock *MockRGStore
}

// NewMockRGStore creates a new mock instance.
func NewMockRGStore(ctrl *gomock.Controller) *MockRGStore {
	mock := &MockRGStore{ctrl: ctrl}
	mock.recorder = &MockRGStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRGStore) EXPECT() *MockRGStoreMockRecorder {
	return m.recorder
}

// AddResourcesToGroup mocks base method.
func (m *MockRGStore) AddResourcesToGroup(ctx *gofr.Context, groupID int64, resourceID []int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddResourcesToGroup", ctx, groupID, resourceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddResourcesToGroup indicates an expected call of AddResourcesToGroup.
func (mr *MockRGStoreMockRecorder) AddResourcesToGroup(ctx, groupID, resourceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddResourcesToGroup", reflect.TypeOf((*MockRGStore)(nil).AddResourcesToGroup), ctx, groupID, resourceID)
}

// CreateResourceGroup mocks base method.
func (m *MockRGStore) CreateResourceGroup(ctx *gofr.Context, resourceGroup *models.RGCreate) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateResourceGroup", ctx, resourceGroup)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateResourceGroup indicates an expected call of CreateResourceGroup.
func (mr *MockRGStoreMockRecorder) CreateResourceGroup(ctx, resourceGroup any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateResourceGroup", reflect.TypeOf((*MockRGStore)(nil).CreateResourceGroup), ctx, resourceGroup)
}

// DeleteResourceGroup mocks base method.
func (m *MockRGStore) DeleteResourceGroup(ctx *gofr.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResourceGroup", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteResourceGroup indicates an expected call of DeleteResourceGroup.
func (mr *MockRGStoreMockRecorder) DeleteResourceGroup(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResourceGroup", reflect.TypeOf((*MockRGStore)(nil).DeleteResourceGroup), ctx, id)
}

// GetAllResourceGroups mocks base method.
func (m *MockRGStore) GetAllResourceGroups(ctx *gofr.Context, cloudAccID int64) ([]models.ResourceGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllResourceGroups", ctx, cloudAccID)
	ret0, _ := ret[0].([]models.ResourceGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllResourceGroups indicates an expected call of GetAllResourceGroups.
func (mr *MockRGStoreMockRecorder) GetAllResourceGroups(ctx, cloudAccID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllResourceGroups", reflect.TypeOf((*MockRGStore)(nil).GetAllResourceGroups), ctx, cloudAccID)
}

// GetResourceGroupByID mocks base method.
func (m *MockRGStore) GetResourceGroupByID(ctx *gofr.Context, cloudAccID, id int64) (*models.ResourceGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceGroupByID", ctx, cloudAccID, id)
	ret0, _ := ret[0].(*models.ResourceGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourceGroupByID indicates an expected call of GetResourceGroupByID.
func (mr *MockRGStoreMockRecorder) GetResourceGroupByID(ctx, cloudAccID, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceGroupByID", reflect.TypeOf((*MockRGStore)(nil).GetResourceGroupByID), ctx, cloudAccID, id)
}

// GetResourceIDs mocks base method.
func (m *MockRGStore) GetResourceIDs(ctx *gofr.Context, id int64) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceIDs", ctx, id)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourceIDs indicates an expected call of GetResourceIDs.
func (mr *MockRGStoreMockRecorder) GetResourceIDs(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceIDs", reflect.TypeOf((*MockRGStore)(nil).GetResourceIDs), ctx, id)
}

// RemoveResourceFromGroup mocks base method.
func (m *MockRGStore) RemoveResourceFromGroup(ctx *gofr.Context, groupID, resourceID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveResourceFromGroup", ctx, groupID, resourceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveResourceFromGroup indicates an expected call of RemoveResourceFromGroup.
func (mr *MockRGStoreMockRecorder) RemoveResourceFromGroup(ctx, groupID, resourceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveResourceFromGroup", reflect.TypeOf((*MockRGStore)(nil).RemoveResourceFromGroup), ctx, groupID, resourceID)
}

// UpdateResourceGroup mocks base method.
func (m *MockRGStore) UpdateResourceGroup(ctx *gofr.Context, resourceGroup *models.RGUpdate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateResourceGroup", ctx, resourceGroup)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateResourceGroup indicates an expected call of UpdateResourceGroup.
func (mr *MockRGStoreMockRecorder) UpdateResourceGroup(ctx, resourceGroup any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResourceGroup", reflect.TypeOf((*MockRGStore)(nil).UpdateResourceGroup), ctx, resourceGroup)
}

// MockResourceService is a mock of ResourceService interface.
type MockResourceService struct {
	ctrl     *gomock.Controller
	recorder *MockResourceServiceMockRecorder
	isgomock struct{}
}

// MockResourceServiceMockRecorder is the mock recorder for MockResourceService.
type MockResourceServiceMockRecorder struct {
	mock *MockResourceService
}

// NewMockResourceService creates a new mock instance.
func NewMockResourceService(ctrl *gomock.Controller) *MockResourceService {
	mock := &MockResourceService{ctrl: ctrl}
	mock.recorder = &MockResourceServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResourceService) EXPECT() *MockResourceServiceMockRecorder {
	return m.recorder
}

// GetByID mocks base method.
func (m *MockResourceService) GetByID(ctx *gofr.Context, id int64) (*models.Resource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*models.Resource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockResourceServiceMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockResourceService)(nil).GetByID), ctx, id)
}
