// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -destination=mock_interface.go -package=service -source=interface.go
//

// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"

	client "github.com/zopdev/zopdev/api/audit/client"
	store "github.com/zopdev/zopdev/api/audit/store"
	gomock "go.uber.org/mock/gomock"
	gofr "gofr.dev/pkg/gofr"
)

// MockRule is a mock of Rule interface.
type MockRule struct {
	ctrl     *gomock.Controller
	recorder *MockRuleMockRecorder
	isgomock struct{}
}

// MockRuleMockRecorder is the mock recorder for MockRule.
type MockRuleMockRecorder struct {
	mock *MockRule
}

// NewMockRule creates a new mock instance.
func NewMockRule(ctrl *gomock.Controller) *MockRule {
	mock := &MockRule{ctrl: ctrl}
	mock.recorder = &MockRuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRule) EXPECT() *MockRuleMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockRule) Execute(ctx *gofr.Context, ca *client.CloudAccount) ([]store.Items, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, ca)
	ret0, _ := ret[0].([]store.Items)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockRuleMockRecorder) Execute(ctx, ca any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockRule)(nil).Execute), ctx, ca)
}

// GetCategory mocks base method.
func (m *MockRule) GetCategory() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategory")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetCategory indicates an expected call of GetCategory.
func (mr *MockRuleMockRecorder) GetCategory() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategory", reflect.TypeOf((*MockRule)(nil).GetCategory))
}

// GetName mocks base method.
func (m *MockRule) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName.
func (mr *MockRuleMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockRule)(nil).GetName))
}

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
	isgomock struct{}
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreatePending mocks base method.
func (m *MockStore) CreatePending(ctx *gofr.Context, result *store.Result) (*store.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePending", ctx, result)
	ret0, _ := ret[0].(*store.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePending indicates an expected call of CreatePending.
func (mr *MockStoreMockRecorder) CreatePending(ctx, result any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePending", reflect.TypeOf((*MockStore)(nil).CreatePending), ctx, result)
}

// GetLastRun mocks base method.
func (m *MockStore) GetLastRun(ctx *gofr.Context, cloudAccID int64, rule string) (*store.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastRun", ctx, cloudAccID, rule)
	ret0, _ := ret[0].(*store.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastRun indicates an expected call of GetLastRun.
func (mr *MockStoreMockRecorder) GetLastRun(ctx, cloudAccID, rule any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastRun", reflect.TypeOf((*MockStore)(nil).GetLastRun), ctx, cloudAccID, rule)
}

// UpdateResult mocks base method.
func (m *MockStore) UpdateResult(ctx *gofr.Context, result *store.Result) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateResult", ctx, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateResult indicates an expected call of UpdateResult.
func (mr *MockStoreMockRecorder) UpdateResult(ctx, result any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResult", reflect.TypeOf((*MockStore)(nil).UpdateResult), ctx, result)
}
