// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -destination=mock_interface.go -package=handler -source=interface.go
//

// Package handler is a generated GoMock package.
package handler

import (
	reflect "reflect"

	store "github.com/zopdev/zopdev/api/audit/store"
	gomock "go.uber.org/mock/gomock"
	gofr "gofr.dev/pkg/gofr"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// GetAllResults mocks base method.
func (m *MockService) GetAllResults(ctx *gofr.Context, cloudAccID int64) (map[string][]*store.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllResults", ctx, cloudAccID)
	ret0, _ := ret[0].(map[string][]*store.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllResults indicates an expected call of GetAllResults.
func (mr *MockServiceMockRecorder) GetAllResults(ctx, cloudAccID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllResults", reflect.TypeOf((*MockService)(nil).GetAllResults), ctx, cloudAccID)
}

// GetResultByCategory mocks base method.
func (m *MockService) GetResultByCategory(ctx *gofr.Context, cloudAccID int64) (map[string][]*store.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResultByCategory", ctx, cloudAccID)
	ret0, _ := ret[0].(map[string][]*store.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResultByCategory indicates an expected call of GetResultByCategory.
func (mr *MockServiceMockRecorder) GetResultByCategory(ctx, cloudAccID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResultByCategory", reflect.TypeOf((*MockService)(nil).GetResultByCategory), ctx, cloudAccID)
}

// GetResultByID mocks base method.
func (m *MockService) GetResultByID(ctx *gofr.Context, cloudAccID int64, ruleID string) (*store.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResultByID", ctx, cloudAccID, ruleID)
	ret0, _ := ret[0].(*store.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResultByID indicates an expected call of GetResultByID.
func (mr *MockServiceMockRecorder) GetResultByID(ctx, cloudAccID, ruleID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResultByID", reflect.TypeOf((*MockService)(nil).GetResultByID), ctx, cloudAccID, ruleID)
}

// RunAll mocks base method.
func (m *MockService) RunAll(ctx *gofr.Context, cloudAccID int64) (map[string][]*store.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunAll", ctx, cloudAccID)
	ret0, _ := ret[0].(map[string][]*store.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunAll indicates an expected call of RunAll.
func (mr *MockServiceMockRecorder) RunAll(ctx, cloudAccID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunAll", reflect.TypeOf((*MockService)(nil).RunAll), ctx, cloudAccID)
}

// RunByCategory mocks base method.
func (m *MockService) RunByCategory(ctx *gofr.Context, category string, cloudAccID int64) ([]*store.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunByCategory", ctx, category, cloudAccID)
	ret0, _ := ret[0].([]*store.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunByCategory indicates an expected call of RunByCategory.
func (mr *MockServiceMockRecorder) RunByCategory(ctx, category, cloudAccID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunByCategory", reflect.TypeOf((*MockService)(nil).RunByCategory), ctx, category, cloudAccID)
}

// RunByID mocks base method.
func (m *MockService) RunByID(ctx *gofr.Context, ruleID string, cloudAccID int64) (*store.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunByID", ctx, ruleID, cloudAccID)
	ret0, _ := ret[0].(*store.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunByID indicates an expected call of RunByID.
func (mr *MockServiceMockRecorder) RunByID(ctx, ruleID, cloudAccID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunByID", reflect.TypeOf((*MockService)(nil).RunByID), ctx, ruleID, cloudAccID)
}
